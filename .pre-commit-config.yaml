# Pre-commit hooks for chatty-commander
# Install with: uv run pre-commit install
# Run manually: uv run pre-commit run --all-files

repos:
  # Basic file hygiene
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        description: Trim trailing whitespace
      - id: end-of-file-fixer
        description: Ensure files end with newline
      - id: check-yaml
        description: Validate YAML syntax
      - id: check-added-large-files
        description: Prevent large files from being committed
        args: ['--maxkb=10240']  # 10MB limit
      - id: check-merge-conflict
        description: Check for merge conflict markers
      - id: check-case-conflict
        description: Check for case conflicts
      - id: mixed-line-ending
        description: Check for mixed line endings
        args: ['--fix=lf']
      - id: check-toml
        description: Validate TOML syntax
      - id: check-json
        description: Validate JSON syntax

  # Python code quality
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        description: Run ruff linter with auto-fix
        args: ["--fix", "--exit-non-zero-on-fix"]
      - id: ruff-format
        description: Run ruff formatter

  # Python version compatibility
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.17.0
    hooks:
      - id: pyupgrade
        description: Upgrade Python syntax
        args: ["--py311-plus"]

  # Documentation quality
  - repo: https://github.com/pycqa/doc8
    rev: v1.1.2
    hooks:
      - id: doc8
        description: Check documentation style
        args: ["-e", ".md"]
        files: "\\.(md|rst)$"

  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        description: Check docstring style
        files: "^src/"

  # Markdown and YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        description: Format markdown, YAML, and JSON
        types_or: [markdown, yaml, json]
        exclude: "^(uv\.lock|package-lock\.json)$"

  # Custom local hooks for project-specific checks
  - repo: local
    hooks:
      - id: prevent-worktrees-tracking
        name: Prevent .worktrees/ tracking
        description: Ensure .worktrees/ directories are not tracked
        entry: bash -c 'if git ls-files | grep -q "^\.worktrees/"; then echo "❌ .worktrees/ directory is being tracked! Please remove from git and add to .gitignore"; exit 1; fi'
        language: system
        pass_filenames: false
        always_run: true

      - id: python-compile-check
        name: Python compilation check
        description: Ensure all Python files compile
        entry: python -m py_compile
        language: system
        files: "\.py$"

      - id: check-conventional-commits
        name: Check conventional commit format
        description: Ensure commit messages follow conventional commits
        entry: bash -c '
          commit_msg=$(git log -1 --pretty=format:"%s" 2>/dev/null || echo "")
          if [[ -n "$commit_msg" ]] && ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build)(\(.+\))?: .+"; then
            echo "❌ Commit message does not follow conventional commits format:"
            echo "   $commit_msg"
            echo "Expected format: type(scope): description"
            echo "Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build"
            exit 1
          fi'
        language: system
        stages: [commit-msg]
        pass_filenames: false
        always_run: true

      - id: check-branch-name
        name: Check branch naming convention
        description: Ensure branch names follow conventions
        entry: bash -c '
          branch=$(git branch --show-current 2>/dev/null || echo "")
          if [[ -n "$branch" ]] && [[ "$branch" != "main" ]] && [[ "$branch" != "master" ]] && [[ "$branch" != "develop" ]]; then
            if ! echo "$branch" | grep -qE "^(feature|fix|docs|refactor|test|chore|hotfix)/[a-z0-9-]+$"; then
              echo "❌ Branch name does not follow conventions: $branch"
              echo "Expected format: type/description-in-kebab-case"
              echo "Types: feature, fix, docs, refactor, test, chore, hotfix"
              exit 1
            fi
          fi'
        language: system
        pass_filenames: false
        always_run: true

# Configuration
default_language_version:
  python: python3.11

# Global settings
fail_fast: false
default_stages: [commit, push]

# CI settings
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
