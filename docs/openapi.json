{
  "openapi": "3.0.3",
  "info": {
    "title": "ChattyCommander API",
    "description": "Voice command automation system with web interface",
    "version": "0.2.0",
    "contact": {
      "name": "ChattyCommander",
      "url": "https://github.com/your-repo/chatty-commander"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8100",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/api/v1/status": {
      "get": {
        "summary": "Get system status",
        "description": "Returns the current status of the ChattyCommander system including active state and loaded models.",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "System status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStatus"
                },
                "example": {
                  "status": "running",
                  "current_state": "idle",
                  "active_models": ["hey_chat_tee", "hey_khum_puter"],
                  "uptime": "2h 15m 30s",
                  "version": "0.2.0"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/config": {
      "get": {
        "summary": "Get configuration",
        "description": "Returns the current system configuration including model paths and command mappings.",
        "tags": ["Configuration"],
        "responses": {
          "200": {
            "description": "Configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Configuration"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update configuration",
        "description": "Updates the system configuration. Requires restart for some changes to take effect.",
        "tags": ["Configuration"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Configuration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration updated successfully"
          },
          "400": {
            "description": "Invalid configuration data"
          }
        }
      }
    },
    "/api/v1/state": {
      "get": {
        "summary": "Get current state",
        "description": "Returns the current operational state of the system (idle, computer, chatty).",
        "tags": ["State Management"],
        "responses": {
          "200": {
            "description": "Current state retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateInfo"
                },
                "example": {
                  "current_state": "idle",
                  "active_models": ["hey_chat_tee", "hey_khum_puter"],
                  "last_command": "hey_chat_tee",
                  "timestamp": "2024-01-15T10:30:00Z"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Change state",
        "description": "Manually change the system state to idle, computer, or chatty mode.",
        "tags": ["State Management"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "enum": ["idle", "computer", "chatty"],
                    "description": "Target state to transition to"
                  }
                },
                "required": ["state"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "State changed successfully"
          },
          "400": {
            "description": "Invalid state specified"
          }
        }
      }
    },
    "/api/v1/command": {
      "post": {
        "summary": "Execute command",
        "description": "Executes a voice command programmatically. Useful for testing and automation.",
        "tags": ["Commands"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "command": {
                    "type": "string",
                    "description": "Command name to execute",
                    "example": "lights_on"
                  },
                  "parameters": {
                    "type": "object",
                    "description": "Optional command parameters",
                    "additionalProperties": true
                  }
                },
                "required": ["command"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Command executed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "execution_time": {
                      "type": "number",
                      "description": "Execution time in milliseconds"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid command or parameters"
          },
          "404": {
            "description": "Command not found"
          }
        }
      }
    },
    "/api/v1/health": {
      "get": {
        "summary": "Health check",
        "description": "Simple health check endpoint to verify server is running.",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "Server is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "status": "healthy",
                  "timestamp": "2024-01-15T10:30:00Z",
                  "uptime": "2h 15m 30s"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/version": {
      "get": {
        "summary": "Get version info",
        "description": "Returns the application version and current git SHA (if available).",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "Version info retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "git_sha": {
                      "type": ["string", "null"]
                    }
                  },
                  "required": ["version"]
                }
              }
            }
          }
        }
      }
    },
    "/ws": {
      "get": {
        "summary": "WebSocket connection",
        "description": "Establishes a WebSocket connection for real-time updates including state changes, command detections, and system events.",
        "tags": ["WebSocket"],
        "responses": {
          "101": {
            "description": "WebSocket connection established"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SystemStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["running", "stopped", "error"],
            "description": "Overall system status"
          },
          "current_state": {
            "type": "string",
            "enum": ["idle", "computer", "chatty"],
            "description": "Current operational state"
          },
          "active_models": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of currently loaded voice models"
          },
          "uptime": {
            "type": "string",
            "description": "System uptime in human-readable format"
          },
          "version": {
            "type": "string",
            "description": "Application version"
          }
        },
        "required": ["status", "current_state", "active_models"]
      },
      "Configuration": {
        "type": "object",
        "properties": {
          "general_models_path": {
            "type": "string",
            "description": "Path to general voice models"
          },
          "system_models_path": {
            "type": "string",
            "description": "Path to system command models"
          },
          "chat_models_path": {
            "type": "string",
            "description": "Path to chat interaction models"
          },
          "model_actions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "keypress": {
                  "type": "string",
                  "description": "Keyboard shortcut to execute"
                },
                "url": {
                  "type": "string",
                  "description": "URL to request"
                }
              }
            },
            "description": "Mapping of voice commands to actions"
          },
          "default_state": {
            "type": "string",
            "enum": ["idle", "computer", "chatty"],
            "description": "Default state on startup"
          }
        }
      },
      "StateInfo": {
        "type": "object",
        "properties": {
          "current_state": {
            "type": "string",
            "enum": ["idle", "computer", "chatty"]
          },
          "active_models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_command": {
            "type": "string",
            "description": "Last detected voice command"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last state change"
          }
        },
        "required": ["current_state", "active_models"]
      }
    }
  },
  "tags": [
    {
      "name": "System",
      "description": "System status and health monitoring"
    },
    {
      "name": "Configuration",
      "description": "System configuration management"
    },
    {
      "name": "State Management",
      "description": "Operational state control"
    },
    {
      "name": "Commands",
      "description": "Voice command execution"
    },
    {
      "name": "WebSocket",
      "description": "Real-time communication"
    }
  ]
}
