[project]
name = "chatty-commander"
version = "0.2.0"
description = "Advanced AI-powered voice command system with web interface and real-time communication"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
authors = [
    {name = "ChattyCommander Team", email = "team@chattycommander.dev"},
]
maintainers = [
    {name = "ChattyCommander Team", email = "team@chattycommander.dev"},
]
keywords = [
    "ai", "voice", "command", "automation", "web", "real-time",
    "fastapi", "websocket", "openai", "assistant", "productivity"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: System :: Monitoring",
]
dependencies = [
    "openwakeword>=0.4.0",
    # Optional runtime audio capture dependency moved to extras: pyaudio

    "pyautogui>=0.9.54",
    "pytest>=8.4.1",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "watchdog>=3.0.0",
    "requests>=2.32.4",
    "psutil>=7.0.0",
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    "pyjwt>=2.10.1",
    "bcrypt==4.0.1",
    "websockets>=15.0.1",
    "httpx>=0.28.1",
    "pywebview>=4.4",
    "pystray>=0.19.5",
    "onnx==1.18.0",
    "openai-agents>=0.1.0",
]

[project.optional-dependencies]
audio = ["pyaudio>=0.2.13"]

[project.scripts]
chatty-commander = "chatty_commander.cli.main:main"

[dependency-groups]
dev = [
    "ruff>=0.1.0",
    "black>=23.0.0",
    "doc8>=1.1.1",
    "pydocstyle>=6.0.0",
    "jsonschema>=4.0.0",
    "pytest-check-links>=0.5.0",
    "mypy>=1.8.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "pip-audit>=2.0.0",
    "coverage[toml]>=7.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-html>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-testmon>=2.0.0",
    "tox>=4.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings>=0.23.0",
]

security = [
    "bandit>=1.7.0",
    "pip-audit>=2.0.0",
    "safety>=2.0.0",
]

performance = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/.tox/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
explicit_package_bases = true
mypy_path = "src"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = false
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pyautogui.*",
    "openwakeword.*",
    "pywebview.*",
    "pystray.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "config: marks tests as configuration tests",
    "error_handling: marks tests as error handling tests",
    "system: marks tests as system tests",
    "metrics: marks tests as metrics tests",
    "example: marks tests as example tests",
    "final: marks tests as final tests",
    "async_test: marks tests as async tests",
    "smoke: marks tests as smoke tests",
    "comprehensive: marks tests as comprehensive tests",
    "consolidation: marks tests as consolidation tests",
    "framework: marks tests as framework tests",
    "enterprise: marks tests as enterprise tests",
    "best_practices: marks tests as best practices tests",
    "ultimate: marks tests as ultimate tests",
    "ai: marks tests as AI tests",
    "insights: marks tests as insights tests",
    "analytics: marks tests as analytics tests",
    "automation: marks tests as automation tests",
    "cicd: marks tests as CI/CD tests",
    "orchestration: marks tests as orchestration tests",
    "reporting: marks tests as reporting tests",
    "visualization: marks tests as visualization tests",
    "prediction: marks tests as prediction tests",
    "optimization: marks tests as optimization tests",
    "ml: marks tests as machine learning tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
]
norecursedirs = [
    "archive/*",
    "webui/frontend/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "config-*.py",
]

# Removed legacy setuptools block for old flat-layout (py-modules, utils)
