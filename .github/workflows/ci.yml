name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install project
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio anyio

      - name: Run quick system smoke
        run: |
          echo "$PWD" >> $GITHUB_PATH
          PATH=$PWD:$PATH python tests/test_system.py --verbose

      - name: Run pytest (skip heavy perf)
        run: |
          pytest -q -k "not performance"

  e2e-test:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: uv sync --dev

      - name: Start backend server
        run: |
          uv run python -m src.chatty_commander.main --web --no-auth --port 8100 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          sleep 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install frontend dependencies
        run: |
          cd webui/frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd webui/frontend
          npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          cd webui/frontend
          npx playwright test

      - name: Stop backend server
        if: always()
        run: kill $SERVER_PID

  performance-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Run performance benchmarks
        run: uv run pytest -k "perf" --benchmark-only --benchmark-json=benchmark.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.json

  build:
    runs-on: ubuntu-latest
    needs: [test, performance-test]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync

      - name: Build package
        run: uv build

      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import chatty_commander; print('Package installed successfully')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: chatty-commander:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm chatty-commander --help

  release:
    runs-on: ubuntu-latest
    needs: [test, performance-test, build, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v5

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            - Automated release from CI/CD pipeline
            - All tests passed
            - Security audit completed
            - Performance benchmarks executed
          draft: false
          prerelease: false

  deploy-staging:
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

  notify:
    runs-on: ubuntu-latest
    needs: [test, performance-test, build, docker]
    if: always()

    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "Pipeline failed! Check the logs for details."
          # Add notification logic here (Slack, Discord, etc.)
