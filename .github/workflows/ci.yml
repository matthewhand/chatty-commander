name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # Fast checks that run on every PR
  lint-and-format:
    name: "Lint & Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Check code formatting
        run: |
          uv run ruff format --check --diff
          if [ $? -ne 0 ]; then
            echo "‚ùå Code formatting issues found. Run 'uv run ruff format' to fix."
            exit 1
          fi

      - name: Run ruff linting
        run: |
          uv run ruff check --output-format=github
          if [ $? -ne 0 ]; then
            echo "‚ùå Linting issues found. Run 'uv run ruff check --fix' to auto-fix."
            exit 1
          fi

      - name: Check import sorting
        run: uv run ruff check --select I --output-format=github

  # Python compilation and import safety
  compile-check:
    name: "Python Compile Check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Compile all Python files
        run: |
          echo "üîç Checking Python compilation..."
          find src -name "*.py" -exec python -m py_compile {} \;
          find tests -name "*.py" -exec python -m py_compile {} \;
          echo "‚úÖ All Python files compile successfully"

      - name: Test critical imports
        run: |
          echo "üîç Testing critical module imports..."
          uv run python -c "import chatty_commander; print('‚úÖ chatty_commander imports OK')"
          uv run python -c "from chatty_commander.web.server import create_app; print('‚úÖ web.server imports OK')"
          uv run python -c "from chatty_commander.cli import main; print('‚úÖ CLI imports OK')"

  # Git hygiene and repository health
  git-hygiene:
    name: "Git Hygiene"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for branch analysis

      - name: Check for .worktrees tracking
        run: |
          echo "üîç Checking for .worktrees/ tracking..."
          if git ls-files | grep -q "^\.worktrees/"; then
            echo "‚ùå .worktrees/ directory is being tracked!"
            echo "Found tracked .worktrees files:"
            git ls-files | grep "^\.worktrees/"
            echo "Please remove .worktrees/ from tracking and add to .gitignore"
            exit 1
          fi
          echo "‚úÖ No .worktrees/ tracking detected"

      - name: Check for conflict markers
        run: |
          echo "üîç Checking for merge conflict markers..."
          if git grep -l "^<<<<<<< \|^======= \|^>>>>>>> " -- '*.py' '*.md' '*.yml' '*.yaml' '*.json' '*.toml' || true; then
            echo "‚ùå Merge conflict markers found in tracked files!"
            git grep -n "^<<<<<<< \|^======= \|^>>>>>>> " -- '*.py' '*.md' '*.yml' '*.yaml' '*.json' '*.toml' || true
            exit 1
          fi
          echo "‚úÖ No conflict markers found"

      - name: Check .gitignore includes .worktrees
        run: |
          echo "üîç Checking .gitignore includes .worktrees/..."
          if ! grep -q "^\.worktrees/" .gitignore; then
            echo "‚ùå .gitignore does not include .worktrees/"
            echo "Please add '.worktrees/' to .gitignore"
            exit 1
          fi
          echo "‚úÖ .gitignore properly excludes .worktrees/"

      - name: Check for large files
        run: |
          echo "üîç Checking for large files..."
          large_files=$(find . -type f -size +10M -not -path './.git/*' -not -path './.*' || true)
          if [ -n "$large_files" ]; then
            echo "‚ùå Large files detected (>10MB):"
            echo "$large_files"
            echo "Consider using Git LFS for large files"
            exit 1
          fi
          echo "‚úÖ No large files detected"

  # Quick tests for fast feedback
  quick-tests:
    name: "Quick Tests"
    runs-on: ubuntu-latest
    needs: [compile-check]  # Ensure compilation works first
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Run import safety tests
        run: |
          echo "üîç Running import safety tests..."
          uv run pytest tests/test_web_server_guards.py -v
          uv run pytest tests/test_git_hygiene.py -v

      - name: Run package metadata tests
        run: |
          echo "üîç Running package metadata tests..."
          uv run pytest tests/test_pkg_metadata.py -v

      - name: Run quick system smoke test
        run: |
          echo "üîç Running system smoke test..."
          echo "$PWD" >> $GITHUB_PATH
          PATH=$PWD:$PATH uv run python tests/test_system.py --verbose

      - name: Run core unit tests (fast)
        run: |
          echo "üîç Running core unit tests..."
          uv run pytest tests/ -k "not (performance or slow or integration)" -x --tb=short

  # Full test suite (runs on main branch and nightly)
  full-tests:
    name: "Full Test Suite"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    needs: [lint-and-format, compile-check, git-hygiene, quick-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Run full test suite
        run: |
          echo "üîç Running full test suite..."
          uv run pytest tests/ --tb=short --durations=10

      - name: Generate coverage report
        if: success()
        run: |
          echo "üìä Generating coverage report..."
          uv run pytest tests/ --cov=src/chatty_commander --cov-report=xml --cov-report=html

      - name: Upload coverage to artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  # Nightly comprehensive checks
  nightly-checks:
    name: "Nightly Comprehensive Checks"
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Check for stale branches
        run: |
          echo "üîç Checking for stale branches..."
          ./scripts/cleanup_branches.sh --dry-run --days-old 60 || true

      - name: Run performance tests
        run: |
          echo "üîç Running performance tests..."
          uv run pytest tests/ -k "performance" --tb=short || true

      - name: Check documentation links
        run: |
          echo "üîç Checking documentation links..."
          uv run pytest --check-links README.md docs -q || true

      - name: Security scan
        run: |
          echo "üîç Running security scan..."
          uv run pip-audit || true
